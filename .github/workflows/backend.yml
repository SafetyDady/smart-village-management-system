name: Backend CI/CD

on:
  push:
    branches: [ main, dev/next-phase ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_smart_village
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_smart_village" >> .env
        echo "SECRET_KEY=test_secret_key_for_ci" >> .env
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_smart_village
    
    - name: Run tests with pytest
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_smart_village
        SECRET_KEY: test_secret_key_for_ci
    
    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        pip install pytest-cov
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_smart_village
        SECRET_KEY: test_secret_key_for_ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        directory: ./backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Run Black (code formatting)
      working-directory: ./backend
      run: |
        black --check --diff app/
    
    - name: Run isort (import sorting)
      working-directory: ./backend
      run: |
        isort --check-only --diff app/
    
    - name: Run flake8 (linting)
      working-directory: ./backend
      run: |
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy (type checking)
      working-directory: ./backend
      run: |
        mypy app/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (security linting)
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/
    
    - name: Run Safety (dependency vulnerability check)
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test application startup
      working-directory: ./backend
      run: |
        python -c "from app.main import app; print('âœ… Application starts successfully')"
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test_secret_key_for_build
    
    - name: Create deployment artifact
      run: |
        tar -czf backend-${{ github.sha }}.tar.gz backend/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-build-${{ github.sha }}
        path: backend-${{ github.sha }}.tar.gz
        retention-days: 30

