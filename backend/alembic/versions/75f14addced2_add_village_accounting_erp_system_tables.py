"""Add Village Accounting ERP System tables

Revision ID: 75f14addced2
Revises: add_accounting_models
Create Date: 2025-07-11 04:04:57.020720

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '75f14addced2'
down_revision: Union[str, None] = 'add_accounting_models'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounting_periods',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('period_name', sa.String(length=50), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('fiscal_year', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_closed', sa.Boolean(), nullable=False),
    sa.Column('closed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('closed_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("period_type IN ('MONTHLY', 'QUARTERLY', 'ANNUAL')", name='check_period_type'),
    sa.CheckConstraint('start_date < end_date', name='check_period_dates'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('period_name', 'fiscal_year', name='unique_period_name_year')
    )
    op.create_index('idx_fiscal_year', 'accounting_periods', ['fiscal_year'], unique=False)
    op.create_index('idx_period_dates', 'accounting_periods', ['start_date', 'end_date'], unique=False)
    op.create_table('chart_of_accounts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('account_code', sa.String(length=10), nullable=False),
    sa.Column('account_name', sa.String(length=255), nullable=False),
    sa.Column('account_name_en', sa.String(length=255), nullable=True),
    sa.Column('account_type', sa.String(length=20), nullable=False),
    sa.Column('balance_type', sa.String(length=10), nullable=False),
    sa.Column('parent_account_id', sa.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system_account', sa.Boolean(), nullable=False),
    sa.Column('allow_manual_entry', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.CheckConstraint("account_type IN ('ASSET', 'LIABILITY', 'EQUITY', 'REVENUE', 'EXPENSE')", name='check_account_type'),
    sa.CheckConstraint("balance_type IN ('DEBIT', 'CREDIT')", name='check_balance_type'),
    sa.CheckConstraint('level >= 1 AND level <= 5', name='check_account_level'),
    sa.ForeignKeyConstraint(['parent_account_id'], ['chart_of_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_account_code', 'chart_of_accounts', ['account_code'], unique=False)
    op.create_index('idx_account_type', 'chart_of_accounts', ['account_type'], unique=False)
    op.create_index('idx_parent_account', 'chart_of_accounts', ['parent_account_id'], unique=False)
    op.create_index(op.f('ix_chart_of_accounts_account_code'), 'chart_of_accounts', ['account_code'], unique=True)
    op.create_table('expense_categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('category_code', sa.String(length=10), nullable=False),
    sa.Column('category_name', sa.String(length=255), nullable=False),
    sa.Column('category_name_en', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('default_account_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['default_account_id'], ['chart_of_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_category_active', 'expense_categories', ['is_active'], unique=False)
    op.create_index('idx_category_code', 'expense_categories', ['category_code'], unique=False)
    op.create_index(op.f('ix_expense_categories_category_code'), 'expense_categories', ['category_code'], unique=True)
    op.create_table('general_ledger',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('period_id', sa.UUID(), nullable=False),
    sa.Column('beginning_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('ending_balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('debit_total', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('credit_total', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('debit_total >= 0 AND credit_total >= 0', name='check_positive_totals'),
    sa.ForeignKeyConstraint(['account_id'], ['chart_of_accounts.id'], ),
    sa.ForeignKeyConstraint(['period_id'], ['accounting_periods.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('account_id', 'period_id', name='unique_account_period')
    )
    op.create_index('idx_account_period', 'general_ledger', ['account_id', 'period_id'], unique=False)
    op.create_index('idx_period_balance', 'general_ledger', ['period_id', 'ending_balance'], unique=False)
    op.create_table('journal_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('entry_number', sa.String(length=20), nullable=False),
    sa.Column('transaction_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('reference_number', sa.String(length=50), nullable=True),
    sa.Column('reference_type', sa.String(length=50), nullable=True),
    sa.Column('reference_id', sa.UUID(), nullable=True),
    sa.Column('total_debit', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('total_credit', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('posted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('posted_by', sa.UUID(), nullable=True),
    sa.Column('period_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.CheckConstraint("status IN ('DRAFT', 'POSTED', 'REVERSED')", name='check_journal_entry_status'),
    sa.CheckConstraint('total_debit = total_credit', name='check_balanced_entry'),
    sa.CheckConstraint('total_debit >= 0 AND total_credit >= 0', name='check_positive_totals'),
    sa.ForeignKeyConstraint(['period_id'], ['accounting_periods.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_entry_number', 'journal_entries', ['entry_number'], unique=False)
    op.create_index('idx_period_status', 'journal_entries', ['period_id', 'status'], unique=False)
    op.create_index('idx_reference', 'journal_entries', ['reference_type', 'reference_id'], unique=False)
    op.create_index('idx_transaction_date', 'journal_entries', ['transaction_date'], unique=False)
    op.create_index(op.f('ix_journal_entries_entry_number'), 'journal_entries', ['entry_number'], unique=True)
    op.create_table('bank_reconciliation_gl',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('bank_reconciliation_id', sa.UUID(), nullable=False),
    sa.Column('gl_account_id', sa.UUID(), nullable=False),
    sa.Column('journal_entry_id', sa.UUID(), nullable=True),
    sa.Column('reconciled_amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('reconciliation_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('reconciliation_status', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('reconciled_by', sa.UUID(), nullable=True),
    sa.CheckConstraint("reconciliation_status IN ('MATCHED', 'UNMATCHED', 'DISPUTED', 'ADJUSTED')", name='check_reconciliation_status'),
    sa.ForeignKeyConstraint(['gl_account_id'], ['chart_of_accounts.id'], ),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_bank_recon_gl', 'bank_reconciliation_gl', ['bank_reconciliation_id'], unique=False)
    op.create_index('idx_gl_recon', 'bank_reconciliation_gl', ['gl_account_id'], unique=False)
    op.create_index('idx_recon_status', 'bank_reconciliation_gl', ['reconciliation_status'], unique=False)
    op.create_table('journal_entry_lines',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('line_number', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('debit_amount', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('credit_amount', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('line_description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('(debit_amount > 0 AND credit_amount = 0) OR (debit_amount = 0 AND credit_amount > 0)', name='check_debit_or_credit'),
    sa.CheckConstraint('debit_amount >= 0 AND credit_amount >= 0', name='check_positive_amounts'),
    sa.ForeignKeyConstraint(['account_id'], ['chart_of_accounts.id'], ),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('journal_entry_id', 'line_number', name='unique_line_number')
    )
    op.create_index('idx_account_line', 'journal_entry_lines', ['account_id'], unique=False)
    op.create_index('idx_journal_entry_line', 'journal_entry_lines', ['journal_entry_id', 'line_number'], unique=False)
    op.create_table('payment_journal_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('payment_id', sa.UUID(), nullable=False),
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('payment_id', 'journal_entry_id', name='unique_payment_journal')
    )
    op.create_index('idx_journal_payment', 'payment_journal_entries', ['journal_entry_id'], unique=False)
    op.create_index('idx_payment_journal', 'payment_journal_entries', ['payment_id'], unique=False)
    op.create_table('spending_records',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('spending_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('reference_number', sa.String(length=100), nullable=True),
    sa.Column('expense_category_id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('bank_reference', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.Column('archived', sa.Boolean(), nullable=False),
    sa.CheckConstraint("status IN ('PENDING', 'APPROVED', 'REJECTED')", name='check_spending_status'),
    sa.CheckConstraint('amount > 0', name='check_positive_amount'),
    sa.ForeignKeyConstraint(['account_id'], ['chart_of_accounts.id'], ),
    sa.ForeignKeyConstraint(['expense_category_id'], ['expense_categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_spending_category', 'spending_records', ['expense_category_id'], unique=False)
    op.create_index('idx_spending_created_by', 'spending_records', ['created_by'], unique=False)
    op.create_index('idx_spending_date', 'spending_records', ['spending_date'], unique=False)
    op.create_index('idx_spending_status', 'spending_records', ['status'], unique=False)
    op.create_table('spending_journal_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('spending_record_id', sa.UUID(), nullable=False),
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.ForeignKeyConstraint(['spending_record_id'], ['spending_records.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('spending_record_id', 'journal_entry_id', name='unique_spending_journal')
    )
    op.create_index('idx_journal_spending', 'spending_journal_entries', ['journal_entry_id'], unique=False)
    op.create_index('idx_spending_journal', 'spending_journal_entries', ['spending_record_id'], unique=False)
    op.drop_constraint(op.f('receipts_payment_id_key'), 'receipts', type_='unique')
    op.drop_constraint(op.f('receipts_receipt_number_key'), 'receipts', type_='unique')
    op.drop_index(op.f('ix_receipts_payment_id'), table_name='receipts')
    op.create_index(op.f('ix_receipts_payment_id'), 'receipts', ['payment_id'], unique=True)
    op.drop_index(op.f('ix_receipts_receipt_number'), table_name='receipts')
    op.create_index(op.f('ix_receipts_receipt_number'), 'receipts', ['receipt_number'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_receipts_receipt_number'), table_name='receipts')
    op.create_index(op.f('ix_receipts_receipt_number'), 'receipts', ['receipt_number'], unique=False)
    op.drop_index(op.f('ix_receipts_payment_id'), table_name='receipts')
    op.create_index(op.f('ix_receipts_payment_id'), 'receipts', ['payment_id'], unique=False)
    op.create_unique_constraint(op.f('receipts_receipt_number_key'), 'receipts', ['receipt_number'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('receipts_payment_id_key'), 'receipts', ['payment_id'], postgresql_nulls_not_distinct=False)
    op.drop_index('idx_spending_journal', table_name='spending_journal_entries')
    op.drop_index('idx_journal_spending', table_name='spending_journal_entries')
    op.drop_table('spending_journal_entries')
    op.drop_index('idx_spending_status', table_name='spending_records')
    op.drop_index('idx_spending_date', table_name='spending_records')
    op.drop_index('idx_spending_created_by', table_name='spending_records')
    op.drop_index('idx_spending_category', table_name='spending_records')
    op.drop_table('spending_records')
    op.drop_index('idx_payment_journal', table_name='payment_journal_entries')
    op.drop_index('idx_journal_payment', table_name='payment_journal_entries')
    op.drop_table('payment_journal_entries')
    op.drop_index('idx_journal_entry_line', table_name='journal_entry_lines')
    op.drop_index('idx_account_line', table_name='journal_entry_lines')
    op.drop_table('journal_entry_lines')
    op.drop_index('idx_recon_status', table_name='bank_reconciliation_gl')
    op.drop_index('idx_gl_recon', table_name='bank_reconciliation_gl')
    op.drop_index('idx_bank_recon_gl', table_name='bank_reconciliation_gl')
    op.drop_table('bank_reconciliation_gl')
    op.drop_index(op.f('ix_journal_entries_entry_number'), table_name='journal_entries')
    op.drop_index('idx_transaction_date', table_name='journal_entries')
    op.drop_index('idx_reference', table_name='journal_entries')
    op.drop_index('idx_period_status', table_name='journal_entries')
    op.drop_index('idx_entry_number', table_name='journal_entries')
    op.drop_table('journal_entries')
    op.drop_index('idx_period_balance', table_name='general_ledger')
    op.drop_index('idx_account_period', table_name='general_ledger')
    op.drop_table('general_ledger')
    op.drop_index(op.f('ix_expense_categories_category_code'), table_name='expense_categories')
    op.drop_index('idx_category_code', table_name='expense_categories')
    op.drop_index('idx_category_active', table_name='expense_categories')
    op.drop_table('expense_categories')
    op.drop_index(op.f('ix_chart_of_accounts_account_code'), table_name='chart_of_accounts')
    op.drop_index('idx_parent_account', table_name='chart_of_accounts')
    op.drop_index('idx_account_type', table_name='chart_of_accounts')
    op.drop_index('idx_account_code', table_name='chart_of_accounts')
    op.drop_table('chart_of_accounts')
    op.drop_index('idx_period_dates', table_name='accounting_periods')
    op.drop_index('idx_fiscal_year', table_name='accounting_periods')
    op.drop_table('accounting_periods')
    # ### end Alembic commands ###
