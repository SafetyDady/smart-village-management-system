"""Add invoice, payment, receipt models

Revision ID: add_accounting_models
Revises: c259340aef97
Create Date: 2025-07-10 12:00:00.000000

"""
from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'add_accounting_models'
down_revision: Union[str, None] = 'c259340aef97'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create invoices table
    op.create_table('invoices',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('property_id', sa.Integer(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column('due_date', sa.DateTime(), nullable=False),
        sa.Column('status', sa.Enum('PENDING', 'PAID', 'OVERDUE', 'CANCELED', name='invoicestatus'), nullable=False),
        sa.Column('invoice_type', sa.Enum('MONTHLY_FEE', 'PENALTY', 'CUSTOM', name='invoicetype'), nullable=False),
        sa.Column('issued_at', sa.DateTime(), nullable=False),
        sa.Column('paid_at', sa.DateTime(), nullable=True),
        sa.Column('archived', sa.Boolean(), nullable=False, default=False),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('updated_by', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('reference_number', sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
        sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('reference_number')
    )
    op.create_index(op.f('ix_invoices_id'), 'invoices', ['id'], unique=False)
    op.create_index(op.f('ix_invoices_property_id'), 'invoices', ['property_id'], unique=False)
    
    # Create payments table
    op.create_table('payments',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('property_id', sa.Integer(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column('payment_date', sa.DateTime(), nullable=False),
        sa.Column('method', sa.Enum('BANK_TRANSFER', 'CASH', 'QR_CODE', 'CREDIT_CARD', 'MOBILE_BANKING', name='paymentmethod'), nullable=False),
        sa.Column('note', sa.Text(), nullable=True),
        sa.Column('reference_number', sa.String(length=100), nullable=True),
        sa.Column('bank_reference', sa.String(length=100), nullable=True),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('archived', sa.Boolean(), nullable=False, default=False),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['property_id'], ['properties.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_index(op.f('ix_payments_property_id'), 'payments', ['property_id'], unique=False)
    
    # Create receipts table
    op.create_table('receipts',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('payment_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('receipt_number', sa.String(length=100), nullable=False),
        sa.Column('issued_at', sa.DateTime(), nullable=False),
        sa.Column('created_by', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('archived', sa.Boolean(), nullable=False, default=False),
        sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
        sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('payment_id'),
        sa.UniqueConstraint('receipt_number')
    )
    op.create_index(op.f('ix_receipts_id'), 'receipts', ['id'], unique=False)
    op.create_index(op.f('ix_receipts_payment_id'), 'receipts', ['payment_id'], unique=False)
    op.create_index(op.f('ix_receipts_receipt_number'), 'receipts', ['receipt_number'], unique=False)
    
    # Create payment_invoices table (many-to-many)
    op.create_table('payment_invoices',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=uuid.uuid4),
        sa.Column('payment_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('invoice_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column('allocated_at', sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
        sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_invoices_id'), 'payment_invoices', ['id'], unique=False)
    op.create_index(op.f('ix_payment_invoices_invoice_id'), 'payment_invoices', ['invoice_id'], unique=False)
    op.create_index(op.f('ix_payment_invoices_payment_id'), 'payment_invoices', ['payment_id'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop payment_invoices table
    op.drop_index(op.f('ix_payment_invoices_payment_id'), table_name='payment_invoices')
    op.drop_index(op.f('ix_payment_invoices_invoice_id'), table_name='payment_invoices')
    op.drop_index(op.f('ix_payment_invoices_id'), table_name='payment_invoices')
    op.drop_table('payment_invoices')
    
    # Drop receipts table
    op.drop_index(op.f('ix_receipts_receipt_number'), table_name='receipts')
    op.drop_index(op.f('ix_receipts_payment_id'), table_name='receipts')
    op.drop_index(op.f('ix_receipts_id'), table_name='receipts')
    op.drop_table('receipts')
    
    # Drop payments table
    op.drop_index(op.f('ix_payments_property_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_table('payments')
    
    # Drop invoices table
    op.drop_index(op.f('ix_invoices_property_id'), table_name='invoices')
    op.drop_index(op.f('ix_invoices_id'), table_name='invoices')
    op.drop_table('invoices')
    
    # Drop enums
    op.execute('DROP TYPE IF EXISTS paymentmethod')
    op.execute('DROP TYPE IF EXISTS invoicetype')
    op.execute('DROP TYPE IF EXISTS invoicestatus')
    
    # ### end Alembic commands ###

