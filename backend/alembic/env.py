from logging.config import fileConfig
import os
import sys

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ DATABASE_URL ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡πÑ‡∏î‡πâ
from dotenv import load_dotenv
load_dotenv()

from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

# ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡∏à‡∏≤‡∏Å app ‡πÑ‡∏î‡πâ
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# ‚úÖ Import Base ‡πÅ‡∏•‡∏∞ Models ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô metadata
from app.core.database import Base
from app.models.user import User
from app.models.village import Village
from app.models.property import Property
from app.models.invoice import Invoice
from app.models.payment import Payment
from app.models.receipt import Receipt
from app.models.payment_invoice import PaymentInvoice

# ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Alembic config object
config = context.config

# ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô DATABASE_URL ‡∏à‡∏≤‡∏Å environment ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ fallback (‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ .env)
database_url = os.getenv("DATABASE_URL", "postgresql://postgres:password@localhost:5432/smart_village")
config.set_main_option("sqlalchemy.url", database_url)

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£ log ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå alembic.ini ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autogenerate
target_metadata = Base.metadata

# -------------------------------
# üöÄ ‡πÇ‡∏´‡∏°‡∏î offline: generate SQL script
def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

# üöÄ ‡πÇ‡∏´‡∏°‡∏î online: connect DB ‡πÅ‡∏•‡∏∞ migrate ‡∏à‡∏£‡∏¥‡∏á
def run_migrations_online() -> None:
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()

# ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î run
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
