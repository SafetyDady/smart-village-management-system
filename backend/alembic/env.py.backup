"""
Alembic env.py – Smart Village Management System
โหลดค่า DATABASE_URL จาก .env และเซตให้ Alembic ใช้
"""

from logging.config import fileConfig
import os
import sys
from pathlib import Path

from alembic import context
from sqlalchemy import engine_from_config, pool
from dotenv import load_dotenv

# ───────────────────────────────────────────────
# 1) เพิ่ม backend เข้า PYTHONPATH ให้หา app ได้
# ───────────────────────────────────────────────
sys.path.append(str(Path(__file__).resolve().parents[2]))

# ───────────────────────────────────────────────
# 2) โหลด .env (มองขึ้นไปโฟลเดอร์บนสุดของ backend)
# ───────────────────────────────────────────────
dotenv_path = Path(__file__).resolve().parents[1] / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
else:
    # fallback – เผื่อวาง .env ไว้ที่ root project
    load_dotenv()

# ───────────────────────────────────────────────
# 3) Alembic Config object
# ───────────────────────────────────────────────
config = context.config
# Override sqlalchemy.url ด้วยค่าจาก .env
database_url = os.getenv("DATABASE_URL")
if not database_url:
    raise RuntimeError("DATABASE_URL not found in .env")

config.set_main_option("sqlalchemy.url", database_url)

# ───────────────────────────────────────────────
# 4) Logging
# ───────────────────────────────────────────────
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# ───────────────────────────────────────────────
# 5) Metadata – import Base จาก app.core.database
# ───────────────────────────────────────────────
from app.core.database import Base

# ⭐ สำคัญ: Import Models ทั้งหมดให้ Alembic เห็น
from app.models.user import User
from app.models.village import Village, Property

target_metadata = Base.metadata

# ───────────────────────────────────────────────
# 6) Offline migration
# ───────────────────────────────────────────────
def run_migrations_offline() -> None:
    """Run migrations without DBAPI (generates SQL)."""
    context.configure(
        url=database_url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

# ───────────────────────────────────────────────
# 7) Online migration
# ───────────────────────────────────────────────
def run_migrations_online() -> None:
    """Run migrations with Engine/Connection."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)

        with context.begin_transaction():
            context.run_migrations()

# ───────────────────────────────────────────────
# 8) Entrypoint
# ───────────────────────────────────────────────
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
